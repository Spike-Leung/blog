import{r as n,o as s,c as a,a as e,F as l,b as r,d as p}from"./app.0c5c70fc.js";const o={},c=e("h1",{id:"部署前端静态文件的简单步骤",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#部署前端静态文件的简单步骤","aria-hidden":"true"},"#"),r(" 部署前端静态文件的简单步骤")],-1),t=e("p",null,[r("笔者目前使用 Vue 开发，开发完成后需要构建静态文件，部署到服务器上，例如 Nginx, 本文将介绍从构建到部署过程中的步骤， 涉及到的一些命令 如 "),e("code",null,"tar"),r(", "),e("code",null,"ssh"),r(", "),e("code",null,"scp"),r(", 以及笔者的一些小技巧。")],-1),i=e("h2",{id:"_1-打包构建",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-打包构建","aria-hidden":"true"},"#"),r(" 1. 打包构建")],-1),d=r("执行你项目中的打包命令进行打包即可，也许是"),u=e("code",null,"yarn build",-1),b=r("， 也许是"),h=e("code",null,"npm run build",-1),m=r(", 具体可以看"),g=e("code",null,"package.json",-1),k=r("中"),f=e("code",null,"scripts",-1),v=r("中的 定义。如果没有定义，则翻阅文档找找构建工具的构建命令即可，例如这是"),x={href:"https://cn.vitejs.dev/guide/static-deploy.html",target:"_blank",rel:"noopener noreferrer"},_=r("Vite的构建部署文档"),w=r("。"),y=e("p",null,"在构建前需要注意的：",-1),z=e("li",null,[r("最好执行 "),e("code",null,"yarn"),r("/"),e("code",null,"npm install"),r(" 安装当前"),e("code",null,"package.json"),r("中指定的最新依赖，避免其他同事更新了依赖，但本地还没更新的问题")],-1),q=r("也许你需要打上一个版本号，方便跟踪当前的版本。(关于版本号定义，可以参考"),A={href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"},E=r("语义化版本"),C=r(")"),B=e("li",null,"也许你还需要设置一些部署时的环境变量或配置",-1),D=e("li",null,"...",-1),G=p('<h2 id="_2-tar打包" tabindex="-1"><a class="header-anchor" href="#_2-tar打包" aria-hidden="true">#</a> 2. tar打包</h2><p>当执行完构建后， 在某个目录下，会生成若干的静态文件，把静态文件上传到服务器上对应的目录，即可以通过服务器访问构建好的静态文件了。</p><p>在上传时，如果一个一个文件上传，会有些麻烦， 我们可以先将这些静态文件打包成一个 tar 包再一次性上传。</p><h3 id="压缩" tabindex="-1"><a class="header-anchor" href="#压缩" aria-hidden="true">#</a> 压缩</h3><p>进入到静态文件所在的目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> path/to/dist\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将静态文件压缩为一个 tar 包</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">tar</span> -zcvf build_1.0.tar.gz *\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参数解释：</p><ul><li><code>-c</code> 表示创建，等同于<code>--create</code></li><li><code>-v</code> 显示打包时的详细输出</li><li><code>-z</code> 使用Gzip对打包文件进行压缩</li><li><code>-f</code> 指定打包后的文件名</li><li><code>*</code> 表示打包当前目录下的所有文件，你也可以指定一个一个的文件进行打包</li></ul><h2 id="_3-scp-上传-tar-包" tabindex="-1"><a class="header-anchor" href="#_3-scp-上传-tar-包" aria-hidden="true">#</a> 3. scp 上传 tar 包</h2><p>打包完之后，需要把 tar 包上传到服务器，可以使用 <code>scp</code> 命令， 假设要上传到 <code>1.1.1.1</code> 上的 <code>/home</code> 目录, 使用 <code>1.1.1.1</code> 的 <code>root</code>用户。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>scp path/to/tar root@1.1.1.1:/home \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>命令解释：</p><ul><li>命令格式: <code>scp source copy</code> 从<code>source</code>传到<code>copy</code></li><li><code>path/to/tar</code> tar 包所在的路径</li><li><code>root@1.1.1.1:/home</code> 要上传的位置 <ul><li><code>root@1.1.1.1</code> 使用<code>root</code>登录<code>1.1.1.1</code>，进行连接</li><li><code>:</code> 分隔目标机器和目录</li><li><code>/home</code> 上传到机器上的目录</li></ul></li></ul><h2 id="_4-ssh-到目标机器" tabindex="-1"><a class="header-anchor" href="#_4-ssh-到目标机器" aria-hidden="true">#</a> 4. ssh 到目标机器</h2><p>要解压目标机器上的 tar 包，先要连接到目标机器，可以使用 <code>ssh</code> 命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ssh</span> root@1.1.1.1\nThe authenticity of <span class="token function">host</span> <span class="token string">&#39;1.1.1.1 (1.1.1.1)&#39;</span> can&#39;t be established.\nECDSA key fingerprint is SHA256:2CDXn8/+GTFrUT7ayu0BRrKAVShN7P13wO0bSJdSAW4.\nAre you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no/<span class="token punctuation">[</span>fingerprint<span class="token punctuation">]</span><span class="token punctuation">)</span>?\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>命令解释:</p><ul><li>使用<code>root</code>用户通过<code>ssh</code>连接<code>1.1.1.1</code>的机器</li><li>这里需要确认服务器的指纹，输入<code>yes</code>就好了 (不过出于安全考虑，你也可以验证一下这个指纹对不对，确定是你要连接的目标机器) <ul><li>这里是因为机器之前没连接过，要把目标机器的公钥存储到下来， 用来下次识别目标机器</li></ul></li></ul><h3 id="避免重复输入密码" tabindex="-1"><a class="header-anchor" href="#避免重复输入密码" aria-hidden="true">#</a> 避免重复输入密码</h3><p>每次使用 <code>ssh</code> 命令，都要重新输入一次密码，着实麻烦，通过把 <code>ssh</code> 密钥存到服务器上，可以避免每次连接时输入密码。</p><p>生成密钥</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ssh-keygen\n\nGenerating public/private rsa key pair.\nEnter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>path/to/.ssh/id_rsa<span class="token punctuation">)</span>:\n<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>执行完成后，在你指定的路径，如 <code>path/to/.ssh/id_rsa</code>中，会生成一个密钥，接下来把密钥复制到服务器上，那服务器就认识 我们的机器，就不需要重复输入密码了。</p><p>上传密钥到服务器，让服务器存储起来:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ssh-copy-id -i path/to/.ssh/id_rsa.pub root@1.1.1.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参数解释：</p><ul><li><code>-i</code> 指定密钥文件，注意，这里的密钥文件对应的是<strong>公钥</strong>，以<code>.pub</code>结尾的密钥文件</li><li><code>path/to/.ssh/id_rsa.pub</code> 传给服务器的公钥</li><li><code>root@1.1.1.1</code> 要上传的目标机器</li></ul><p>第一次执行，还需要输入一次命令，后面就不用啦。</p><h3 id="移除过期的指纹" tabindex="-1"><a class="header-anchor" href="#移除过期的指纹" aria-hidden="true">#</a> 移除过期的指纹</h3><p>前面使用 <code>ssh</code> 连接的时候, 需要确认<code>fingerprint</code>，一般会被保存在 <code>~/.ssh/known_host</code> 文件下（笔者是Mac系统，不同系统存放位置可能有差异）</p><p>有时，目标机器可能重装了，或者目标机器的公钥发生了变化，存储在 <code>~/.ssh/known_host</code> 的目标机器的公钥就失效了。</p><p>解决办法就是打开<code>~/.ssh/known_host</code>， 删除掉对应机器的公钥，重新用<code>ssh</code>连接机器，存储一个新的公钥就好了。</p><h2 id="_5-解压-tar-包" tabindex="-1"><a class="header-anchor" href="#_5-解压-tar-包" aria-hidden="true">#</a> 5. 解压 tar 包</h2><p>当上传到服务器上后，需要把静态文件从 tar 包中解压出来， 你需要把文件解压到服务器指定的目录下，具体要看你服务器如何配置的。</p><p>假设你使用的是 Nginx， 查看 Nginx 配置， 可以知道要把 tar 包解压到什么目录。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token punctuation">..</span>.\n\n    server <span class="token punctuation">{</span>\n        listen       <span class="token number">9999</span><span class="token punctuation">;</span>\n        server_name  localhost<span class="token punctuation">;</span>\n\n        <span class="token comment">#charset koi8-r;</span>\n\n        <span class="token comment">#access_log  logs/host.access.log  main;</span>\n\n        location / <span class="token punctuation">{</span>\n            <span class="token comment"># 这里指定了静态文件所在的文件路径</span>\n            root /home/hello-world<span class="token punctuation">;</span> \n            index index.html index.htm<span class="token punctuation">;</span>\n            try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">#error_page  404              /404.html;</span>\n\n        <span class="token comment"># redirect server error pages to the static page /50x.html</span>\n        <span class="token comment">#</span>\n        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>\n        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>\n            root   html<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>进入到对应的目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> path/to/static_file_folder\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>执行解压命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">tar</span> -xvf build.1.0.tar.gz \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参数解释：</p><ul><li><code>-x</code> 将 tar 包内容解压，等同于 <code>--extract</code></li></ul><p>至此，静态文件的上传已经完成，你应该能够通过服务器访问到这些静态文件了。</p><h2 id="节省手动操作" tabindex="-1"><a class="header-anchor" href="#节省手动操作" aria-hidden="true">#</a> 节省手动操作</h2><p>上面那么多的步骤，每次都要部署都操作一次，也是有些麻烦，那能不能节省这些操作，一步完成呢？</p><p>结合 bash 脚本，把上面的命令组合一下，就可以实现了。</p><p>如将以下脚本保存为<code>tar.sh</code>, 只要执行<code>./tar.sh</code>即可完成打包部署的步骤。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>\n\n<span class="token comment"># abort on errors</span>\n<span class="token builtin class-name">set</span> -e\n\n<span class="token comment"># install 更新依赖</span>\n<span class="token function">yarn</span>\n\n<span class="token comment"># build 构建</span>\n<span class="token function">yarn</span> build\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;Build finish!&quot;</span>\n\n<span class="token comment"># navigate into the build output directory</span>\n<span class="token builtin class-name">cd</span> dist/\n\n    <span class="token builtin class-name">echo</span> <span class="token string">&quot;tar start&quot;</span>\n\n<span class="token comment"># 打包压缩构建后的静态文件</span>\n<span class="token function">tar</span> zcvf build.tar.gz *\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;tar finish&quot;</span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;upload to 1.1.1.1 and untar&#39;</span>\n\n<span class="token comment"># 上传tar包到目标机器，并解压到对应的目录</span>\n<span class="token function">ssh</span> root@1.1.1.1 <span class="token string">&quot;tar -C /home/hello-world -xz -f-&quot;</span> <span class="token operator">&lt;</span> build.tar.gz\n\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;upload &amp; untar done&#39;</span>\n\n<span class="token builtin class-name">cd</span> -\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>',50),N=r("关于 Bash 脚本怎么写，可以看看"),S={href:"https://wangdoc.com/bash/",target:"_blank",rel:"noopener noreferrer"},j=r("Bash 脚本教程"),F=r("， 这里解释一下其中的某行脚本："),H=p('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ssh</span> root@1.1.1.1 <span class="token string">&quot;tar -C /home/hello-world -xz -f-&quot;</span> <span class="token operator">&lt;</span> build.tar.gz\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>ssh root@1.1.1.1</code> 连接机器, 参考<a href="#%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81">避免重复输入密码</a>设置免密码登录</li><li><code>&quot;tar -C /home/hello-world -xz -f-&quot;</code> 连接机器后执行 tar 解压 <ul><li><code>-C</code> 指定解压到什么目录</li><li><code>-xz</code> 执行解压</li><li><code>-f</code> 指定解压的tar包</li><li><code>-</code> 从标准输入中读取, 即读取<code>build.tar.gz</code></li></ul></li><li><code>&lt; build.tar.gz</code> 作为tar命令的输入</li></ul><h2 id="进一步节省操作" tabindex="-1"><a class="header-anchor" href="#进一步节省操作" aria-hidden="true">#</a> 进一步节省操作</h2><p>尽管写了bash脚本，简单的执行一下就能完成部署了，但每次还要手动执行一下。</p>',4),T=r("能不能每次提交时执行呢？使用一些CI工具就可以实现了，例如"),V={href:"https://docs.github.com/en/actions",target:"_blank",rel:"noopener noreferrer"},I=r("GitHub Actions"),O=r("， "),$={href:"https://www.travis-ci.com/",target:"_blank",rel:"noopener noreferrer"},J=r("Travis CI"),K=r("等。"),L=r("笔者使用"),M=e("code",null,"GitHub Actions",-1),P=r("实现了博客的自动部署，也许可以给你一些"),R={href:"https://spike-leung.github.io/blog/others/deploy-blog-with-github-actions.html",target:"_blank",rel:"noopener noreferrer"},U=r("参考"),W=r("。"),X=e("p",null,"此处不做展开，读者可自行探索 😃",-1),Q=e("h2",{id:"参考链接",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),r(" 参考链接")],-1),Y={href:"https://wangdoc.com/ssh/index.html",target:"_blank",rel:"noopener noreferrer"},Z=r("ssh 教程"),nn={href:"https://wangdoc.com/bash/",target:"_blank",rel:"noopener noreferrer"},sn=r("Bash 脚本教程"),an={href:"https://www.thegeekdiary.com/how-to-avoid-ssh-from-prompting-key-passphrase-for-passwordless-logins/",target:"_blank",rel:"noopener noreferrer"},en=r("How to avoid ssh from prompting key passphrase for passwordless logins");o.render=function(r,p){const o=n("OutboundLink");return s(),a(l,null,[c,t,i,e("p",null,[d,u,b,h,m,g,k,f,v,e("a",x,[_,e(o)]),w]),y,e("ul",null,[z,e("li",null,[q,e("a",A,[E,e(o)]),C]),B,D]),G,e("p",null,[N,e("a",S,[j,e(o)]),F]),H,e("p",null,[T,e("a",V,[I,e(o)]),O,e("a",$,[J,e(o)]),K]),e("p",null,[L,M,P,e("a",R,[U,e(o)]),W]),X,Q,e("ul",null,[e("li",null,[e("a",Y,[Z,e(o)])]),e("li",null,[e("a",nn,[sn,e(o)])]),e("li",null,[e("a",an,[en,e(o)])])])],64)};export default o;
