import{r as n,o as s,c as a,a as e,F as t,b as o,d as l}from"./app.d4f32ead.js";const c={},p=e("h1",{id:"使用-github-actions-部署博客到-github-pages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-github-actions-部署博客到-github-pages","aria-hidden":"true"},"#"),o(" 使用 GitHub Actions 部署博客到 GitHub Pages")],-1),i=o("笔者目前的博客使用的是"),u={href:"https://v2.vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},r=o("Vuepress"),b=o("，参考文档，使用 "),d=e("code",null,"Travis CI",-1),k=o(" 实现了博客推送更新后自动部署。"),m=e("p",null,[o("最近了解到 "),e("code",null,"GitHub Actions"),o("，遂将博客的自动部署改为 "),e("code",null,"GitHub Actions"),o(", 本文将简单介绍 "),e("code",null,"GitHub Actions"),o(" 以及笔者博客如何实现自动部署。")],-1),h=e("h2",{id:"github-actions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#github-actions","aria-hidden":"true"},"#"),o(" GitHub Actions")],-1),g=e("h3",{id:"为什么用github-actions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#为什么用github-actions","aria-hidden":"true"},"#"),o(" 为什么用GitHub Actions")],-1),f=e("li",null,"尝鲜",-1),y=e("li",null,[o("它和 "),e("code",null,"GitHub"),o(" 集成到一起，方便")],-1),w=o("有很多别人已经写好的 "),v={href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"},G=o("actions"),x=o(" 可以直接拿来用，避免重复造轮子，节省时间"),H=e("li",null,"...",-1),A=e("h3",{id:"什么是github-actions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是github-actions","aria-hidden":"true"},"#"),o(" 什么是GitHub Actions")],-1),j=e("h4",{id:"event-driven",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#event-driven","aria-hidden":"true"},"#"),o(" Event-Driven")],-1),_=e("blockquote",null,[e("p",null,"GitHub Actions are event-driven, meaning that you can run a series of commands after a specified event has occurred")],-1),T=e("code",null,"GitHub Actions",-1),C=o("它是事件驱动的，当某个事件，例如"),I=e("code",null,"push",-1),D=o("， "),E=e("code",null,"merge",-1),O=o("发生的时候，就触发对应的处理 ("),P={href:"https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions#workflows",target:"_blank",rel:"noopener noreferrer"},L=o("workflows"),U=o(")"),q=l('<h4 id="创建github-actions" tabindex="-1"><a class="header-anchor" href="#创建github-actions" aria-hidden="true">#</a> 创建GitHub Actions</h4><ol><li><p>在Git仓库下创建 <code>.github/workflows</code> 目录， 目录下创建一个对应的 <code>xxxx.yaml</code> 配置文件，每个 <code>yaml</code> 文件对应一个 <code>workflows</code></p></li><li><p>一个<code>xxx.yaml</code>文件，内容大致如下：(这是我的博客的部署<code>workflows</code>, 具体含义见注释)</p></li></ol><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># Optional - The name of the workflow as it will appear in the Actions tab of the GitHub repository.</span>\n<span class="token comment"># workflows 的名称</span>\n<span class="token key atrule">name</span><span class="token punctuation">:</span> deploy<span class="token punctuation">-</span>to<span class="token punctuation">-</span>github<span class="token punctuation">-</span>page\n<span class="token comment"># Specify the event that automatically triggers the workflow file.</span>\n<span class="token comment"># 监听什么事件时触发这个workflows, 这里监听push</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>\n<span class="token comment"># Groups together all the jobs that run in the workflow file</span>\n<span class="token comment"># 这个workflows具体是由哪些任务组成的</span>\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token comment"># define job name</span>\n  <span class="token comment"># 任务1, `deploy`是任务的名称</span>\n  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>\n    <span class="token comment"># Configures the job to run on an Ubuntu Linux runner</span>\n    <span class="token comment"># 在什么环境下执行这个任务</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token comment"># Groups together all the steps that run in the job</span>\n    <span class="token comment"># Each item nested under this section is a separate action or shell command.</span>\n    <span class="token comment"># 任务具体包含什么步骤</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># actions The uses keyword tells the job to retrieve v2 of the community action named actions/checkout@v2</span>\n      <span class="token comment"># 每个步骤，即可以使用(`uses`)别人写好的`actions`, 也可以跑自己写的命令(`run`)</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2 <span class="token comment"># 拉取代码</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2 <span class="token comment"># 装node.js环境</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span> <span class="token comment"># 输入这个`actions`需要的参数，例如版本号</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">&#39;14&#39;</span>\n        <span class="token comment"># shell command, The run keyword tells the job to execute a command on the runner.</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install <span class="token comment"># 安装博客的依赖</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn build <span class="token comment"># 构建博客的静态文件</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3 <span class="token comment"># 使用别人写好把静态文件发布到`GitHub Pages`的`actions`</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> docs/.vuepress/dist\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>部署博客的<code>workflows</code>还是蛮简单的，阅读配置文件，可以发现<code>GitHub Actions</code>的大致流程是这样的:</p><ul><li>当某个事件发生，例如<code>push</code><ul><li>触发<code>workflows</code>， 对应<code>.github/workflows</code>目录下定义的<code>yaml</code>配置</li><li>每个<code>workflows</code><ul><li>定义匹配什么事件 (<code>on: push</code>)</li><li>定义都有那些任务(<code>jobs</code>) <ul><li><code>jobs</code>中定义任务的执行环境(<code>runs-on</code>)</li><li>每个<code>jobs</code>是由一个一个步骤(<code>steps</code>)组成的 <ul><li>每个<code>steps</code>可以是 <ul><li><code>uses</code> 别人写好的 <code>actions</code></li><li><code>run</code> 自己定义的命令</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>所以，思考你想在仓库发生什么事件时，做什么任务，这个任务具体包含哪些步骤，然后编写一个配置文件，就差不多了。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',7),B={href:"https://www.devopsauthority.tech/2021/02/09/github-actions-vs-travis-ci/",target:"_blank",rel:"noopener noreferrer"},F=o("GitHub Actions vs Travis CI – Comparing CI/CD Platforms"),K={href:"https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions",target:"_blank",rel:"noopener noreferrer"},N=o("Introduction to GitHub Actions"),S={href:"https://yaml.org/",target:"_blank",rel:"noopener noreferrer"},V=o("yaml");c.render=function(o,l){const c=n("OutboundLink");return s(),a(t,null,[p,e("p",null,[i,e("a",u,[r,e(c)]),b,d,k]),m,h,g,e("ul",null,[f,y,e("li",null,[w,e("a",v,[G,e(c)]),x]),H]),A,j,_,e("p",null,[T,C,I,D,E,O,e("a",P,[L,e(c)]),U]),q,e("ul",null,[e("li",null,[e("a",B,[F,e(c)])]),e("li",null,[e("a",K,[N,e(c)])]),e("li",null,[e("a",S,[V,e(c)])])])],64)};export default c;
